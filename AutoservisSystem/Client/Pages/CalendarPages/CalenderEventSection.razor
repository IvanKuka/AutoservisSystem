@using AutoservisSystem.Shared
@using AutoservisSystem.Shared.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime IJS
<!-- cast menu dna-->
<!-- pridat event-->
<EditForm model="" OnValidSubmit="UpdateDay">
    <div class="ms-depth-16 card">
        <div class="calendar-toolbar">
            <button class="toolbar-button" type="submit"><i class="oi oi-calendar"></i></button>
        </div>
        <div class="card-content">
            <h3 class="day-font">@SelectedDay.Date.ToString("D")</h3>
            <input type="text" @bind="model.Description" class="fluent-input" placeholder="Pridajte úlohu" />
            @if (model.Holiday)
            {
                <label for="DateTo" class="control-label">Dátum do</label>
                <input type="date"  @bind="model.DateTo" class="fluent-input" />
                <button class="btn btn-primary" type="button" @onclick="ChangeHolidayState">Úloha</button>
            }
            else
            {
                <input type="time" min="06:00" max="24:00" @bind="@model.DateFrom" class="fluent-input" />
                <button class="btn btn-primary" type="button" @onclick="ChangeHolidayState">Dovolenka</button>
            }
        </div>
    </div>
    <!-- list eventov dna-->
    @if (SelectedDay.Events != null)
    {
        <div class="ms-depth-16 card">
            <div class="card-content">
                @foreach (var item in SelectedDay.Events)
                {

                    Parse(item.Description);
                    @if (!item.Autogenerated)
                    {
                        @if (!item.Holiday)
                        {
                            <div class="event shadow-effect Basic-event">
                                @item.Description
                                <br />
                                @item.DateFrom.ToString("HH:mm")
                            </div>
                        }
                        else
                        {
                            <div class="event shadow-effect Holiday-event">
                                @item.Description
                                <br />
                                od: @item.DateFrom.ToString("dd.MM.yyyy")
                                <br />
                                do: @item.DateTo.ToString("dd.MM.yyyy")
                            </div>
                        }
                    }
                    else
                    {
                        if (item.Description.ToUpper().Contains("STK"))
                        {
                            <div class="event shadow-effect Stk">
                                @parseDescription[0]
                                <br />
                                EČV: @parseDescription[1]
                                <br />
                                Meno: @parseDescription[2]
                                <br />
                                Číslo:
                                @for (int i = 3; i < parseDescription.Length; i++)
                                {
                                    @parseDescription[i]
                                }
                            </div>
                        }
                        else if (item.Description.ToUpper().Contains("PREHLIADKA"))
                        {
                            <div class="event shadow-effect Oil">
                                @parseDescription[0]
                                <br />
                                EČV: @parseDescription[1]
                                <br />
                                Meno: @parseDescription[2]
                                <br />
                                Číslo:
                                @for (int i = 3; i < parseDescription.Length; i++)
                                {
                                    @parseDescription[i]
                                }
                            </div>
                        }
                    }
                }
            </div>
        </div>
    }
</EditForm>

@code {
    [Parameter]
    public CalendarDay SelectedDay { get; set; }
    string[] parseDescription;

    CalendarEvent model = new CalendarEvent
    {
        DateTo = DateTime.Now.Date,
        DateFrom = DateTime.Now.Date.AddHours(6)
        
    };

    public void Dispose()
    {

    }

    void AddEvent()
    {
        model.DateFrom = new DateTime(SelectedDay.Date.Year,
                                    SelectedDay.Date.Month,
                                    SelectedDay.Date.Day,
                                    model.DateFrom.Hour,
                                    model.DateFrom.Minute,
                                    0);
        if (SelectedDay.Events == null)
            SelectedDay.Events = new List<CalendarEvent>();
        model.CalendarDayId = SelectedDay.CalendarDayId;
        model.Autogenerated = false;
        //model.CustomerId = 1;
        model.CarId = 1;
        if (!model.Holiday || (model.Holiday && model.DateFrom.Date <= model.DateTo.Date))
            SelectedDay.Events.Add(model);
    }

    void Parse(string description)
    {
        parseDescription = description.Split(' ');
    }

    public async Task UpdateDay()
    {
        AddEvent();
        if (!model.Holiday || (model.Holiday && model.DateFrom.Date <= model.DateTo.Date))
        {
            if (model.CalendarEventId == 0)
                await Http.PostJsonAsync("api/CalendarEvents", model);
            else
                await Http.PutJsonAsync("api/CalendarEvents/" + model.CalendarEventId, model);
        }
        else
        {
            await IJS.InvokeAsync<string>("alert", "Zle zadaný dátum");
        }
        NavigationManager.NavigateTo("calendarPage");
    }

    void ChangeHolidayState()
    {
        model.Holiday = !model.Holiday;
    }
}
