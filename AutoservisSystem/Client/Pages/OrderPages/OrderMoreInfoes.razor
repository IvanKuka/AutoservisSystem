@using AutoservisSystem.Shared.Models
@using AutoservisSystem.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="panel @(Collapsed ? "collapse": "" ) ">
    @if (Order.Tasks != null)
    {
        <div class="panel-body" style="padding-top: 15px;">
            <div class="container-fluid">
                @foreach (WorkTask task in Order.Tasks)
                {
                <div class="row">
                    @if (task.Done)
                    {
                        <div class="fs-3 mb-3">
                            <button class="btn" type="button" @onclick="@(async() => await ChangeDone(task))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16" style="color:#498205">
                                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                                </svg>
                            </button>
                        </div> 
                        }
                    else
                    {
                        <div class="fs-3 mb-3">
                            <button class="btn" type="button" @onclick="@(async() => await ChangeDone(task))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16" style="color:#a4262c;">
                                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"></path>
                                </svg>
                            </button>
                        </div>                  
                     }
                    <div class="col-sm-4 font-weight-bold">@task.Description</div>
                </div>
                }
            </div>
        </div>
        <br />
    }

</div>

@code {
    [Parameter]
    public bool Collapsed { get; set; } = true; // hide by default
    [Parameter]
    public Order Order { get; set; }
    [Parameter]
    public bool Dashboad { get; set; } = false;
    [Parameter]
    public Car Car { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        Order.Tasks = await Http.GetJsonAsync<List<WorkTask>>("api/Tasks/Orders/" + Order.OrderId);
        StateHasChanged();
    }

    public void Dispose()
    {
       
    }


    private async Task ChangeDone(WorkTask task)
    {
        if (Dashboad)
        {
            task.Done = !task.Done;
            await Http.PutJsonAsync("api/Tasks/" + task.TaskId, task);
            var customer = await Http.GetFromJsonAsync<Customer>("api/Customers/" + Order.CustomerId);

            if (task.Description.ToUpper().Contains("STK") && task.Done)
            {
                Car.LastSTK = DateTime.Today;
                var tmp = await Http.GetFromJsonAsync<CalendarEvent>("api/CalendarEvents/" + Car.CarId + "/"
                    + Order.CustomerId + "/" + task.Description + "/" + 2);
                tmp.DateFrom = DateTime.Today.AddYears(2);
                tmp.Description = "STK" + " " + Car.CarEvidenceNumber + " " + customer.Surname + " " + customer.MobileNumber;

                if (tmp.CalendarEventId == 0)
                {
                    await Http.PostJsonAsync("api/CalendarEvents", tmp);
                }
                else
                {
                    await Http.PutJsonAsync("api/CalendarEvents/" + tmp.CalendarEventId, tmp);
                }
                await Http.PutJsonAsync("api/Cars/" + Car.CarId, Car);
            }
            if (task.Description.ToUpper().Contains("PREHLIADKA") && task.Done)
            {
                Car.LastOilChange = DateTime.Today;
                var tmp = await Http.GetFromJsonAsync<CalendarEvent>("api/CalendarEvents/" + Car.CarId + "/"
                    + Order.CustomerId + "/" + task.Description + "/" + 1);
                tmp.DateFrom = DateTime.Today.AddYears(1);
                tmp.Description = "Prehliadka" + " " + Car.CarEvidenceNumber + " " + customer.Surname + " " + customer.MobileNumber;

                if (tmp.CalendarEventId == 0)
                {
                    await Http.PostJsonAsync("api/CalendarEvents", tmp);
                }
                else
                {
                    await Http.PutJsonAsync("api/CalendarEvents/" + tmp.CalendarEventId, tmp);
                }
                await Http.PutJsonAsync("api/Cars/" + Car.CarId, Car);
            }

            var done = Order.Tasks.Where(t => t.Done == false).FirstOrDefault();
            if(done == null)
            {
                Order.Done = true;
                Order.DoneDate = DateTime.Today.Date;
                await Http.PutJsonAsync("api/Orders/" + Order.OrderId, Order);
                NavigationManager.NavigateTo("DashBoard", forceLoad: true);
            }
            else
            {
                Order.Done = false;
                Order.DoneDate = DateTime.Parse("1.1.0001");
                await Http.PutJsonAsync("api/Orders/" + Order.OrderId, Order);
                NavigationManager.NavigateTo("DashBoard");
            }
        }
    }
}
